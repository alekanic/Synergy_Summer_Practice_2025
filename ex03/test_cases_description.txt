# Описание тестовых исходных данных

## Общая информация
Файл содержит тестовые случаи для программы генерации случайных чисел, которая генерирует числа от 1 до 100 и продолжает работу до ввода пользователем числа 0.

## Тестовые случаи

### 1. Тест немедленной остановки (test_immediate_stop)
**Исходные данные**: `['0']`
**Описание**: Пользователь сразу вводит 0 для остановки программы
**Ожидаемый результат**: 
- Программа должна сгенерировать одно случайное число
- Вывести приветствие и сгенерированное число
- Показать результат с одним числом
- Завершиться корректно

### 2. Тест множественных чисел (test_multiple_numbers)
**Исходные данные**: `['5', '10', '0']`
**Описание**: Пользователь вводит два числа (5 и 10), затем 0 для остановки
**Ожидаемый результат**:
- Программа должна сгенерировать 3 случайных числа
- Показать введённые пользователем числа (5 и 10)
- Вывести результат с тремя числами
- Корректно завершиться

### 3. Тест обработки некорректного ввода (test_invalid_input_handling)
**Исходные данные**: `['abc', '5', '0']`
**Описание**: Пользователь сначала вводит некорректные данные (abc), затем корректное число (5), затем 0
**Ожидаемый результат**:
- Программа должна показать сообщение об ошибке для некорректного ввода
- Продолжить работу после ошибки
- Обработать корректный ввод (5)
- Сгенерировать 3 случайных числа
- Завершиться корректно

### 4. Тест диапазона случайных чисел (test_random_number_range)
**Исходные данные**: Генерация 100 случайных чисел
**Описание**: Проверка, что все генерируемые числа находятся в диапазоне [1, 100]
**Ожидаемый результат**:
- Все 100 чисел должны быть >= 1
- Все 100 чисел должны быть <= 100
- Никаких чисел вне диапазона

### 5. Тест длинной последовательности (test_large_sequence)
**Исходные данные**: `['1', '2', '3', '4', '5', '0']`
**Описание**: Пользователь вводит 5 чисел подряд, затем 0
**Ожидаемый результат**:
- Программа должна сгенерировать 6 случайных чисел
- Показать все введённые пользователем числа
- Вывести пронумерованный список из 6 чисел
- Корректно завершиться

### 6. Тест завершения при нуле (test_zero_termination)
**Исходные данные**: `['5', '10', '0']`
**Описание**: Проверка логики остановки программы при вводе нуля
**Ожидаемый результат**:
- Программа должна остановиться при вводе 0
- Собрать только числа до нуля (5 и 10)
- Не обрабатывать данные после нуля

### 7. Тест сбора чисел (test_number_collection)
**Исходные данные**: Генерация 5 случайных чисел
**Описание**: Проверка корректности сбора чисел в список
**Ожидаемый результат**:
- В списке должно быть ровно 5 чисел
- Все числа должны быть в диапазоне [1, 100]
- Никаких дубликатов или некорректных значений

## Типы проверяемых сценариев

### Корректная работа
- Генерация случайных чисел в правильном диапазоне
- Корректное добавление чисел в список
- Правильный вывод результатов
- Корректное завершение при вводе 0

### Обработка ошибок
- Некорректный ввод (не числа)
- Пустой ввод
- Специальные символы
- Восстановление после ошибок

### Граничные случаи
- Немедленная остановка (ввод 0 сразу)
- Длинные последовательности
- Максимальное количество итераций
- Пустые результаты

## Методы тестирования

### Мокирование ввода/вывода
- Использование `unittest.mock.patch` для симуляции пользовательского ввода
- Перехват вывода программы для проверки результатов
- Изоляция тестов от реального ввода/вывода

### Проверка логики
- Валидация диапазона генерируемых чисел
- Проверка корректности сбора данных
- Тестирование условий остановки
- Верификация обработки ошибок 