#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import unittest
from main import analyze_matrix


class TestMatrixAnalysis(unittest.TestCase):
    """–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    
    def test_square_matrix(self):
        """–¢–µ—Å—Ç –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã."""
        matrix = [
            [1, 2, 3],
            [4, 5, 6],
            [7, 8, 9]
        ]
        diagonal_sum, positive_count = analyze_matrix(matrix)
        
        # –°—É–º–º–∞ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏: 1 + 5 + 9 = 15
        self.assertEqual(diagonal_sum, 15)
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: 9
        self.assertEqual(positive_count, 9)
    
    def test_rectangular_matrix(self):
        """–¢–µ—Å—Ç –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã."""
        matrix = [
            [1, 2, 3, 4],
            [5, 6, 7, 8]
        ]
        diagonal_sum, positive_count = analyze_matrix(matrix)
        
        # –°—É–º–º–∞ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏: 1 + 6 = 7 (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å 2)
        self.assertEqual(diagonal_sum, 7)
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: 8
        self.assertEqual(positive_count, 8)
    
    def test_matrix_with_negative_elements(self):
        """–¢–µ—Å—Ç –º–∞—Ç—Ä–∏—Ü—ã —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏."""
        matrix = [
            [1, -2, 3],
            [-4, 5, -6],
            [7, -8, 9]
        ]
        diagonal_sum, positive_count = analyze_matrix(matrix)
        
        # –°—É–º–º–∞ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏: 1 + 5 + 9 = 15
        self.assertEqual(diagonal_sum, 15)
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: 5 (1, 3, 5, 7, 9)
        self.assertEqual(positive_count, 5)
    
    def test_matrix_with_zeros(self):
        """–¢–µ—Å—Ç –º–∞—Ç—Ä–∏—Ü—ã —Å –Ω—É–ª–µ–≤—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏."""
        matrix = [
            [0, 1, 0],
            [1, 0, 1],
            [0, 1, 0]
        ]
        diagonal_sum, positive_count = analyze_matrix(matrix)
        
        # –°—É–º–º–∞ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏: 0 + 0 + 0 = 0
        self.assertEqual(diagonal_sum, 0)
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: 4 (–µ–¥–∏–Ω–∏—Ü—ã)
        self.assertEqual(positive_count, 4)
    
    def test_empty_matrix(self):
        """–¢–µ—Å—Ç –ø—É—Å—Ç–æ–π –º–∞—Ç—Ä–∏—Ü—ã."""
        matrix = []
        diagonal_sum, positive_count = analyze_matrix(matrix)
        
        self.assertEqual(diagonal_sum, 0)
        self.assertEqual(positive_count, 0)
    
    def test_single_element_matrix(self):
        """–¢–µ—Å—Ç –º–∞—Ç—Ä–∏—Ü—ã —Å –æ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º."""
        matrix = [[5]]
        diagonal_sum, positive_count = analyze_matrix(matrix)
        
        self.assertEqual(diagonal_sum, 5)
        self.assertEqual(positive_count, 1)
    
    def test_large_matrix(self):
        """–¢–µ—Å—Ç –±–æ–ª—å—à–æ–π –º–∞—Ç—Ä–∏—Ü—ã."""
        matrix = [
            [1, 2, 3, 4, 5],
            [6, 7, 8, 9, 10],
            [11, 12, 13, 14, 15],
            [16, 17, 18, 19, 20],
            [21, 22, 23, 24, 25]
        ]
        diagonal_sum, positive_count = analyze_matrix(matrix)
        
        # –°—É–º–º–∞ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏: 1 + 7 + 13 + 19 + 25 = 65
        self.assertEqual(diagonal_sum, 65)
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: 25
        self.assertEqual(positive_count, 25)
    
    def test_matrix_with_all_negative(self):
        """–¢–µ—Å—Ç –º–∞—Ç—Ä–∏—Ü—ã —Å–æ –≤—Å–µ–º–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏."""
        matrix = [
            [-1, -2, -3],
            [-4, -5, -6],
            [-7, -8, -9]
        ]
        diagonal_sum, positive_count = analyze_matrix(matrix)
        
        # –°—É–º–º–∞ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏: -1 + (-5) + (-9) = -15
        self.assertEqual(diagonal_sum, -15)
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: 0
        self.assertEqual(positive_count, 0)


class TestMatrixEdgeCases(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤."""
    
    def test_wide_matrix(self):
        """–¢–µ—Å—Ç —à–∏—Ä–æ–∫–æ–π –º–∞—Ç—Ä–∏—Ü—ã (–±–æ–ª—å—à–µ —Å—Ç–æ–ª–±—Ü–æ–≤, —á–µ–º —Å—Ç—Ä–æ–∫)."""
        matrix = [
            [1, 2, 3, 4, 5],
            [6, 7, 8, 9, 10]
        ]
        diagonal_sum, positive_count = analyze_matrix(matrix)
        
        # –°—É–º–º–∞ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏: 1 + 7 = 8 (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å 2)
        self.assertEqual(diagonal_sum, 8)
        self.assertEqual(positive_count, 10)
    
    def test_tall_matrix(self):
        """–¢–µ—Å—Ç –≤—ã—Å–æ–∫–æ–π –º–∞—Ç—Ä–∏—Ü—ã (–±–æ–ª—å—à–µ —Å—Ç—Ä–æ–∫, —á–µ–º —Å—Ç–æ–ª–±—Ü–æ–≤)."""
        matrix = [
            [1, 2],
            [3, 4],
            [5, 6],
            [7, 8]
        ]
        diagonal_sum, positive_count = analyze_matrix(matrix)
        
        # –°—É–º–º–∞ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏: 1 + 4 = 5 (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å 2)
        self.assertEqual(diagonal_sum, 5)
        self.assertEqual(positive_count, 8)


def run_test_case(test_name, matrix, expected_diagonal, expected_positive):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    print(f"\n–¢–µ—Å—Ç: {test_name}")
    print(f"–ú–∞—Ç—Ä–∏—Ü–∞: {matrix}")
    
    diagonal_sum, positive_count = analyze_matrix(matrix)
    
    print(f"–û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞ –¥–∏–∞–≥–æ–Ω–∞–ª–∏: {expected_diagonal}, –ø–æ–ª—É—á–µ–Ω–æ: {diagonal_sum}")
    print(f"–û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö: {expected_positive}, –ø–æ–ª—É—á–µ–Ω–æ: {positive_count}")
    
    if diagonal_sum == expected_diagonal and positive_count == expected_positive:
        print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù")
        return True
    else:
        print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤."""
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ì–†–ê–ú–ú–´ –ê–ù–ê–õ–ò–ó–ê –ú–ê–¢–†–ò–¶")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        ("–ö–≤–∞–¥—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ 3x3", 
         [[1, 2, 3], [4, 5, 6], [7, 8, 9]], 15, 9),
        
        ("–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ 2x4", 
         [[1, 2, 3, 4], [5, 6, 7, 8]], 7, 8),
        
        ("–ú–∞—Ç—Ä–∏—Ü–∞ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏", 
         [[1, -2, 3], [-4, 5, -6], [7, -8, 9]], 15, 5),
        
        ("–ú–∞—Ç—Ä–∏—Ü–∞ —Å –Ω—É–ª—è–º–∏", 
         [[0, 1, 0], [1, 0, 1], [0, 1, 0]], 0, 4),
        
        ("–û–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç", 
         [[5]], 5, 1),
        
        ("–í—Å–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ", 
         [[-1, -2], [-3, -4]], -5, 0)
    ]
    
    passed = 0
    total = len(test_cases)
    
    for test_name, matrix, expected_diagonal, expected_positive in test_cases:
        if run_test_case(test_name, matrix, expected_diagonal, expected_positive):
            passed += 1
    
    print(f"\n{'='*50}")
    print(f"–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    else:
        print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")


if __name__ == "__main__":
    main() 